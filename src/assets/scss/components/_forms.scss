@use "../theme" as *;


// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

/*
 * Input Field
 */
.my-input {
   --transition: all 0.2s ease-out;
   --height: 76px;
   --active-height: calc(var(--height) - 34px);
   --y-space: .875rem;

   @media(min-width: $sm_bp) {
      --height: 82px;
      --active-height: calc(var(--height) - 36px);
      --y-space: .9375rem;
   }

   position: relative;
   width: 100%;
   height: var(--height);
   cursor: text;

   .my-border {
      position: absolute;
      bottom: 0; left: 0;
      height: 100%; width: 100%;
      border: 1px solid $midnight-900;
      border-radius: var(--bs-border-radius);
      transition: border-color 0.2s ease-out, height 0.2s ease-out;
      background-color: $midnight-900;
   }

   .title {
      position: absolute;
      top: var(--y-space);
      left: 1.5rem;
      transition: var(--transition);
      z-index: 1;
   }

   .inputEL {
      all: unset;
      font: inherit;
      background: none;
      border: none;
      margin: 1px 0;
      outline: none;

      transition: var(--transition);
      position: absolute;
      bottom: 0;
      height: calc(var(--active-height) - 2px);
      left: 1.5rem;
      right: 1.25rem;
      z-index: 1;
      padding: 0 0 0.25rem 0;

      // if the input element has the eye toggle, decrease the input field size
      &[data-original-type="password"] {
         right: 3rem;
      }

      &::placeholder { color: rgba($frost-200, 0.8); }
      &::-webkit-input-placeholder { color: rgba($frost-200, 0.8); }
      &:-moz-placeholder { color: rgba($frost-200, 0.8); }
      &::-moz-placeholder { color: rgba($frost-200, 0.8); }
      &:-ms-input-placeholder { color: rgba($frost-200, 0.8); }
   }

   button.eye-toggle {
      position: absolute;
      bottom: 0;
      right: 1.5rem;
      height: 100%;
      z-index: 1;
      cursor: pointer;
      display: flex; align-items: center;
      transition: right 0.2s ease-out, height 0.2s ease-out;
   }

   &.focused, &.isset {
      .title {
         top: calc(var(--y-space) / 2);
         left: 1rem;
      }
      .inputEL {
         padding: 0;
      }
      .my-border {
         height: var(--active-height);
      }
      button.eye-toggle {
         height: var(--active-height);
         right: 1.125rem;
      }
   }
   &.focused {
      .my-border {
         border-color: $midnight-900;
      }
   }
}

// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

/*
 * TeatArea Input Field
 */
.my-input.textarea-input {
   --addy-space: 0px;

   --transition: all 0.2s ease-out;
   --height: calc(76px + var(--addy-space) - 28px); // subtract the height of the text input field
   --active-height: calc(var(--height) - 34px);
   --y-space: .875rem;

   @media(min-width: $sm_bp) {
      --height: calc(82px + var(--addy-space) - 32px); // subtract the height of the text input field
      --active-height: calc(var(--height) - 36px);
      --y-space: .9375rem;
   }

   .inputEL {
      overflow: hidden;
      resize: none;
      padding-bottom: 0.5rem;
      margin: 0;
      height: var(--active-height);
   }

   // TextArea field should not transition downwards if the input field is 'focused' or 'hasSet'
   &.focused, &.hasSet {
      .inputEL {
         margin-bottom: -0.25rem;
      }
   }

   // Height should not transition if the teatArea input field is 'focused' and 'hasSet'
   &.focused.hasSet {
      .my-border {
         transition: height 0s linear;
      }
   }
}